import GoogleProvider from "next-auth/providers/google";
import GitHubProvider from "next-auth/providers/github";

// Mock –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockUsersDB = new Map();

export const authOptions = {
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
  },
  
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      authorization: {
        params: {
          scope: "openid email profile",
          prompt: "consent",
        },
      },
    }),
    GitHubProvider({
      clientId: process.env.GITHUB_ID,
      clientSecret: process.env.GITHUB_SECRET,
      profile(profile) {
        return {
          id: profile.id.toString(),
          name: profile.name || profile.login,
          email: profile.email,
          image: profile.avatar_url,
          username: profile.login,
        };
      },
    }),
  ],

  callbacks: {
    // ‚úÖ –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞
    async signIn({ user, account, profile, email, credentials }) {
      console.log("üö™ signIn callback –≤—ã–∑–≤–∞–Ω:", {
        user: user?.email,
        provider: account?.provider,
        profileExists: !!profile,
        isNewUser: !mockUsersDB.has(user.email)
      });

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω email
        const allowedDomains = ['gmail.com', 'yahoo.com', 'github.com', 'yandex.ru'];
      const emailDomain = user.email.split('@')[1];
      
      if (!allowedDomains.includes(emailDomain)) {
        console.log("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –¥–æ–º–µ–Ω–∞:", emailDomain);
        return false;
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã)
      if (account.provider === "google" && !profile.email_verified) {
        console.log("‚ùå Email –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω");
        return false;
      }

      // 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–ë–î"
      if (!mockUsersDB.has(user.email)) {
        mockUsersDB.set(user.email, {
          id: user.id,
          email: user.email,
          name: user.name,
          provider: account.provider,
          role: 'user',
          createdAt: new Date().toISOString(),
          loginCount: 0
        });
        console.log("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
      }

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ö–æ–¥–æ–≤
      const userData = mockUsersDB.get(user.email);
      userData.loginCount += 1;
      userData.lastLogin = new Date().toISOString();

      console.log("‚úÖ –í—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω");
      return true;
    },

    // ‚úÖ –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞
    async jwt({ token, user, account, profile, trigger, session }) {
      console.log("üîê jwt callback –≤—ã–∑–≤–∞–Ω:", {
        tokenUser: token?.email,
        newUser: user?.email,
        trigger: trigger
      });

      // 1. –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ - –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user) {
        const userData = mockUsersDB.get(user.email);
        token.id = userData.id;
        token.provider = account.provider;
        token.role = userData.role;
        token.loginCount = userData.loginCount;
        token.createdAt = userData.createdAt;
      }

      // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞
      if (trigger === "update" && session) {
        console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏:", session);
        // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ session
        token.lastUpdated = new Date().toISOString();
      }

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ
      if (token.email && mockUsersDB.has(token.email)) {
        const userData = mockUsersDB.get(token.email);
        token.loginCount = userData.loginCount;
      }

      return token;
    },

    // ‚úÖ –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é
    async session({ session, token, user }) {
      console.log("üìã session callback –≤—ã–∑–≤–∞–Ω:", {
        sessionUser: session.user?.email,
        tokenUser: token?.email
      });

      // 1. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JWT –≤ —Å–µ—Å—Å–∏—é
      if (token) {
        session.user.id = token.id;
        session.user.role = token.role;
        session.user.loginCount = token.loginCount;
        session.user.createdAt = token.createdAt;
        session.provider = token.provider;
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        session.meta = {
          tokenExpires: token.exp,
          lastUpdated: token.lastUpdated,
          isTokenValid: token.exp * 1000 > Date.now()
        };
      }

      // 3. –î–æ–±–∞–≤–ª—è–µ–º permissions –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
      session.permissions = getPermissions(session.user.role);

      return session;
    },

    // ‚úÖ –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Å–µ—Ö –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
    async redirect({ url, baseUrl }) {
      console.log("üîÑ redirect callback –≤—ã–∑–≤–∞–Ω:", { url, baseUrl });

      // 1. –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –∏–ª–∏ URL –Ω–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞
      if (url.startsWith("/")) return `${baseUrl}${url}`;
      if (url.startsWith(baseUrl)) return url;
      
      // 2. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      return baseUrl;
    },
  },

  // ‚úÖ –°–æ–±—ã—Ç–∏—è - –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
  events: {
    async signIn(message) {
      console.log("üéâ EVENT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª:", message.user.email);
    },
    async signOut(message) {
      console.log("üëã EVENT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª:", message.token?.email);
    },
    async createUser(message) {
      console.log("üÜï EVENT: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", message.user.email);
    },
    async updateUser(message) {
      console.log("üìù EVENT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:", message.user.email);
    },
    async linkAccount(message) {
      console.log("üîó EVENT: –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω:", message.user.email);
    },
    async session(message) {
      console.log("üìÑ EVENT: –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞:", message.session.user?.email);
    },
  },

  pages: {
    signIn: "/auth/signin",
    error: "/auth/error",
    newUser: "/auth/welcome", // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  },
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è permissions
function getPermissions(role) {
  const permissions = {
    user: ['read:profile', 'write:profile'],
    admin: ['read:profile', 'write:profile', 'read:users', 'write:users'],
    moderator: ['read:profile', 'write:profile', 'read:users']
  };
  return permissions[role] || permissions.user;
}
