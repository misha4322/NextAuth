"use client";

import { useState, useEffect } from "react";
import { signIn, signOut, update } from "next-auth/react";

export function CallbacksDebug({ session }) {
  const [logs, setLogs] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  const addLog = (message, type = 'info') => {
    setLogs(prev => [{
      id: Date.now(),
      message,
      type,
      timestamp: new Date().toLocaleTimeString()
    }, ...prev].slice(0, 20)); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤
  };

  const handleTestSignIn = async () => {
    setIsLoading(true);
    addLog('üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞...', 'warning');
    
    const result = await signIn('google', {
      redirect: false,
      callbackUrl: '/debug/callbacks'
    });

    if (result?.error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${result.error}`, 'error');
    } else {
      addLog('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
    }
    
    setIsLoading(false);
  };

  const handleTestUpdate = async () => {
    addLog('üîÑ –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...', 'warning');
    
    await update({
      ...session,
      user: {
        ...session.user,
        lastManualUpdate: new Date().toISOString()
      }
    });
    
    addLog('‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
    window.location.reload();
  };

  const handleTestSignOut = async () => {
    addLog('üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã—Ö–æ–¥–∞...', 'warning');
    
    await signOut({ redirect: false });
    addLog('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success');
    window.location.reload();
  };

  // –≠–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏ –∏–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏
  useEffect(() => {
    addLog('üìã Session callback –≤—ã–ø–æ–ª–Ω–µ–Ω');
    addLog('üîê JWT callback –≤—ã–ø–æ–ª–Ω–µ–Ω');
    addLog('üö™ SignIn callback –≤—ã–ø–æ–ª–Ω–µ–Ω');
  }, []);

  return (
    <div className="space-y-6">
      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h2 className="text-xl font-semibold text-white mb-4">
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Callbacks
        </h2>
        
        <div className="flex gap-4 flex-wrap">
          <button
            onClick={handleTestSignIn}
            disabled={isLoading}
            className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:opacity-50 transition-colors"
          >
            {isLoading ? '–í—Ö–æ–¥...' : '–¢–µ—Å—Ç –í—Ö–æ–¥–∞'}
          </button>
          
          <button
            onClick={handleTestUpdate}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
          >
            –¢–µ—Å—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
          </button>
          
          <button
            onClick={handleTestSignOut}
            className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
          >
            –¢–µ—Å—Ç –í—ã—Ö–æ–¥–∞
          </button>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h2 className="text-xl font-semibold text-white mb-4">
          –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
        </h2>
        <pre className="bg-gray-900 p-4 rounded text-green-400 text-sm overflow-auto">
          {JSON.stringify(session, null, 2)}
        </pre>
      </div>

      {/* –õ–æ–≥–∏ */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h2 className="text-xl font-semibold text-white mb-4">
          –õ–æ–≥–∏ Callbacks
        </h2>
        
        <div className="space-y-2 max-h-96 overflow-auto">
          {logs.map(log => (
            <div
              key={log.id}
              className={`p-3 rounded text-sm font-mono ${
                log.type === 'error' ? 'bg-red-900 text-red-200' :
                log.type === 'success' ? 'bg-green-900 text-green-200' :
                log.type === 'warning' ? 'bg-yellow-900 text-yellow-200' :
                'bg-gray-700 text-gray-200'
              }`}
            >
              <span className="text-gray-400">[{log.timestamp}]</span> {log.message}
            </div>
          ))}
        </div>
      </div>

      {/* –°—Ö–µ–º–∞ —Ä–∞–±–æ—Ç—ã callbacks */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h2 className="text-xl font-semibold text-white mb-4">
          –°—Ö–µ–º–∞ —Ä–∞–±–æ—Ç—ã Callbacks
        </h2>
        
        <div className="text-gray-300 space-y-2 text-sm">
          <div>1. <strong>signIn()</strong> ‚Üí –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–π—Ç–∏</div>
          <div>2. <strong>jwt()</strong> ‚Üí –°–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç JWT —Ç–æ–∫–µ–Ω</div>
          <div>3. <strong>session()</strong> ‚Üí –§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞</div>
          <div>4. <strong>redirect()</strong> ‚Üí –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏</div>
          <div>5. <strong>events</strong> ‚Üí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</div>
        </div>
      </div>
    </div>
  );
}
